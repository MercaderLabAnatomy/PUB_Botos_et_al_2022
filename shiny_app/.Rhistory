subplot_widths=c(0.4, 0.03),
# subplot_heights=c(0.1,0.03, 0.8),
subplot_heights=c(0.04,0.95),
hclust_method = "mcquitty",
plot_method = "plotly",
key.title = "Expression by\nGene Values",
grid_color = "white",
grid_width = 0.21)#heatmap_layers = theme(axis.line=element_blank()))
#All 148 genes core regeneration
xy  <- read.delim("/media/marius/Samsung_T5/PhD/Projects/prsa/Outputs/r/Cytoscape/Cleaned_Annotation_Ensembl_v4/coreRegeneration/core_regeneration_injuries_log2fc.txt",sep="\t",header = TRUE)
# Select only those which are positive in all 3
only_pos_core <- xy |> dplyr:: filter(if_all(where(is.numeric), ~ .x > 0) | !if_any(where(is.numeric), ~ .x < 0))
# Select only those which are negative in all 3
#only_neg_core <- xy |> dplyr::filter(if_all(where(is.numeric), ~ .x > 0) | across(where(is.numeric), ~ .x < 0))
only_neg_core <- xy |> dplyr:: filter(if_all(where(is.numeric), ~ .x < 0) | !if_any(where(is.numeric), ~ .x > 0))
#The remaining mixed ones
mixed_core <- xy[!xy$ID %in% c(only_neg_core$ID,only_pos_core$ID),]
only_pos_core$ID
dim(only_pos_core)
mixed_core$ID
dim(mixed_core)
only_neg_core$ID
dim(only_neg_core)
rownames(xy) <- xy$ID
# my_palette_v <- rev(brewer.pal(n = 3, name = "YlGr"))
# my_palette_v <- rev(brewer.pal(n = 3, name = "ClassicTableau"))
str(xy[,c(2,3,4)])
xy$Resection
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
#All 148 genes core regeneration
xy  <- read.delim("/media/marius/Samsung_T5/PhD/Projects/prsa/Outputs/r/Cytoscape/Cleaned_Annotation_Ensembl_v4/coreRegeneration/core_regeneration_injuries_log2fc.txt",sep="\t",header = TRUE)
# Select only those which are positive in all 3
only_pos_core <- xy |> dplyr:: filter(if_all(where(is.numeric), ~ .x > 0) | !if_any(where(is.numeric), ~ .x < 0))
# Select only those which are negative in all 3
#only_neg_core <- xy |> dplyr::filter(if_all(where(is.numeric), ~ .x > 0) | across(where(is.numeric), ~ .x < 0))
only_neg_core <- xy |> dplyr:: filter(if_all(where(is.numeric), ~ .x < 0) | !if_any(where(is.numeric), ~ .x > 0))
#The remaining mixed ones
mixed_core <- xy[!xy$ID %in% c(only_neg_core$ID,only_pos_core$ID),]
only_pos_core$ID
dim(only_pos_core)
mixed_core$ID
dim(mixed_core)
only_neg_core$ID
dim(only_neg_core)
rownames(xy) <- xy$ID
str(xy[,c(2,3,4)])
xy$Resection
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
#col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
#col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
#col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
#col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
#col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
#col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
#col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
#plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
#plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = FALSE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = TRUE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
heatmaply::heatmaply(x = xy[,c(2,3,4)],
scale_fill_gradient_fun = scale_fill_gradientn(
colours = c("darkblue", "blue", "white", "yellow","orange","red","darkred"),
limits = c(-5,15),
values = scales::rescale(c(-5,-2,0,2,5,10,15))),
# scale_fill_gradient_fun = scale_fill_gradientn(colours = terrain.colors(3)),
# scale_fill_gradient_fun =  scale_fill_stepsn(colors = my_palette_v,labels=scales::label_number(accuracy=0.1),
#                                              n.breaks=15, show.limits=T,
#                                              limits = c(-5, 15)),
#colors = rev(colorRampPalette(brewer.pal(3, "RdBu"))(256)),
#col_side_colors = colnames(xy[,c(2,3,4)]),
col_side_colors = tibble::tibble("<b>Column Names</b>" = colnames(xy[,c(2,3,4)])),
col_side_palette = c("Ablation"= "#E69F00","Resection" = "#CC6699","Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels = TRUE,
Rowv = TRUE,
Colv = FALSE,
subplot_widths=c(0.4, 0.4),
#plot_method = "plotly",
scale = "none",
key.title = "Expression by\nLog2FC",
grid_color = "white",
grid_width = 0.71,
hclust_method = "mcquitty")
# heatmaply::heatmaply(x= core_mat[cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]],
heatmaply::heatmaply(x= core_mat |> dplyr::select(cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]),
colors = my_palette,
col_side_colors = tibble::tibble("<b>Column Names</b>",cols_core$Condition),
col_side_palette = c("Sham" = "#999999",
"Ablated"= "#E69F00",
"Amputation" = "#CC6699",
"Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels=TRUE,
Rowv = TRUE,
Colv = FALSE,
scale = "none",
subplot_widths=c(0.4, 0.03),
# subplot_heights=c(0.1,0.03, 0.8),
subplot_heights=c(0.04,0.95),
hclust_method = "mcquitty",
#plot_method = "plotly",
key.title = "Expression by\nGene Values",
grid_color = "white",
grid_width = 0.21)#heatmap_layers = theme(axis.line=element_blank()))
core_mat
core_mat |> dplyr::select(cols_core$ID[order(cols_core$Condition,decreasing = TRUE)])
my_palette
# heatmaply::heatmaply(x= core_mat[cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]],
heatmaply::heatmaply(x= core_mat |> dplyr::select(cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]),
colors = my_palette,
col_side_colors = tibble::tibble("<b>Column Names</b>",cols_core$Condition),
col_side_palette = c("Sham" = "#999999",
"Ablated"= "#E69F00",
"Amputation" = "#CC6699",
"Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels=TRUE,
Rowv = TRUE,
Colv = FALSE,
scale = "none",
subplot_widths=c(0.4, 0.03),
# subplot_heights=c(0.1,0.03, 0.8),
subplot_heights=c(0.04,0.95),
hclust_method = "mcquitty",
#plot_method = "plotly",
key.title = "Expression by\nGene Values",
grid_color = "white",
grid_width = 0.21)#heatmap_layers = theme(axis.line=element_blank()))
# heatmaply::heatmaply(x= core_mat[cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]],
heatmaply::heatmaply(x= core_mat |> dplyr::select(cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]),
#colors = my_palette,
col_side_colors = tibble::tibble("<b>Column Names</b>",cols_core$Condition),
col_side_palette = c("Sham" = "#999999",
"Ablated"= "#E69F00",
"Amputation" = "#CC6699",
"Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels=TRUE,
Rowv = TRUE,
Colv = FALSE,
scale = "none",
subplot_widths=c(0.4, 0.03),
# subplot_heights=c(0.1,0.03, 0.8),
subplot_heights=c(0.04,0.95),
hclust_method = "mcquitty",
#plot_method = "plotly",
key.title = "Expression by\nGene Values",
grid_color = "white",
grid_width = 0.21)#heatmap_layers = theme(axis.line=element_blank()))
# heatmaply::heatmaply(x= core_mat[cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]],
heatmaply::heatmaply(x= core_mat |> dplyr::select(cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]),
#colors = my_palette,
col_side_colors = tibble::tibble("<b>Column Names</b>",cols_core$Condition),
col_side_palette = c("Sham" = "#999999",
"Ablated"= "#E69F00",
"Amputation" = "#CC6699",
"Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels=TRUE,
Rowv = TRUE,
Colv = FALSE,
scale = "none",
subplot_widths=c(0.4, 0.03),
# subplot_heights=c(0.1,0.03, 0.8),
subplot_heights=c(0.04,0.95),
hclust_method = "mcquitty",
#plot_method = "plotly",
key.title = "Expression by\nGene Values",
grid_color = "white",
grid_width = 0.21)#heatmap_layers = theme(axis.line=element_blank()))
# heatmaply::heatmaply(x= core_mat[cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]],
heatmaply::heatmaply(x= core_mat |> dplyr::select(cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]),
#colors = my_palette,
col_side_colors = tibble::tibble("<b>Column Names</b>" = cols_core$Condition),
col_side_palette = c("Sham" = "#999999",
"Ablated"= "#E69F00",
"Amputation" = "#CC6699",
"Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels=TRUE,
Rowv = TRUE,
Colv = FALSE,
scale = "none",
subplot_widths=c(0.4, 0.03),
# subplot_heights=c(0.1,0.03, 0.8),
subplot_heights=c(0.04,0.95),
hclust_method = "mcquitty",
#plot_method = "plotly",
key.title = "Expression by\nGene Values",
grid_color = "white",
grid_width = 0.21)#heatmap_layers = theme(axis.line=element_blank()))
# heatmaply::heatmaply(x= core_mat[cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]],
heatmaply::heatmaply(x= core_mat |> dplyr::select(cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]),
#colors = my_palette,
col_side_colors = tibble::tibble("<b>Column Names</b>" = cols_core$Condition),
col_side_palette = c("Sham" = "#999999",
"Ablated"= "#E69F00",
"Amputation" = "#CC6699",
"Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels=TRUE,
Rowv = TRUE,
Colv = FALSE,
scale = "none",
subplot_widths=c(0.4, 0.03),
# subplot_heights=c(0.1,0.03, 0.8),
subplot_heights=c(0.04,0.95),
hclust_method = "mcquitty",
plot_method = "plotly",
key.title = "Expression by\nGene Values",
grid_color = "white",
grid_width = 0.21)#heatmap_layers = theme(axis.line=element_blank()))
# heatmaply::heatmaply(x= core_mat[cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]],
heatmaply::heatmaply(x= core_mat |> dplyr::select(cols_core$ID[order(cols_core$Condition,decreasing = TRUE)]),
colors = my_palette,
col_side_colors = tibble::tibble("<b>Column Names</b>" = cols_core$Condition),
col_side_palette = c("Sham" = "#999999",
"Ablated"= "#E69F00",
"Amputation" = "#CC6699",
"Cryoinjury" = "#0673B3"),
hide_colorbar = FALSE,
showticklabels=TRUE,
Rowv = TRUE,
Colv = FALSE,
scale = "none",
subplot_widths=c(0.4, 0.03),
# subplot_heights=c(0.1,0.03, 0.8),
subplot_heights=c(0.04,0.95),
hclust_method = "mcquitty",
plot_method = "plotly",
key.title = "Expression by\nGene Values",
grid_color = "white",
grid_width = 0.21)#heatmap_layers = theme(axis.line=element_blank()))
library(shiny); runApp('DashWebShinyInjuries_plotly.R')
options(repos = BiocManager::repositories())
runApp('DashWebShinyInjuries_plotly.R')
options(repos = BiocManager::repositories())
